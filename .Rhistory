order <- max(order1, order2)
time <- (1:length(data)) / length(data)
J       <- knot + norder-1
timesp  <- bsplineS(time,  breaks=seq(0,1,1/knot), norder = norder)
timespI <- timesp
if(order>0){timespI <- timesp[-(1:order), ]}
#timesp  <- matrix(rep(timespI, order), nrow = nrow(timespI))
timespIder <- bsplineS(time,  breaks=seq(0,1,1/knot), norder = norder, nderiv = 1)
timespIder <- timespIder[-(1:order), ]
Umu <- function(x){
mut     <- array(timespI %*% array(exp(x)))
comp2 = array(At * X)
if(order1==0){comp2 = rep(0, length(mut))}
if(order1>1){comp2 = array(rowSums(At * X))}
vart <- array(mut) + array(comp2)
if(order2>0){
temp <- sigma2lat
vart <- rep(0, length(data)-order)
for(i in 1:(length(data)-order)){
vart[i] <- mut[i] + sum(At[i, ]*X[i, ])+ sum(Bt[i, ]*temp[(order+i-1):i])
temp    <- c(temp, vart[i])
}
}
compo   <- - Y*log(vart) + vart
return(sum(compo) + sum(x^2) / (2*100))
}
grad_Umu <- function(x){
mut     <- array(timespI %*% array(exp(x)))
comp2 = array(At * X)
if(order1==0){comp2 = rep(0, length(mut))}
if(order1>1){comp2 = array(rowSums(At * X))}
vart <- array(mut) + array(comp2)
if(order2>0){
temp <- sigma2lat
vart <- rep(0, length(data)-order)
for(i in 1:(length(data)-order)){
vart[i] <- mut[i] + sum(At[i, ]*X[i, ])+ sum(Bt[i, ]*temp[(order+i-1):i])
temp    <- c(temp, vart[i])
}
}
compo   <- - Y/vart + 1
compo   <- t(timespI) %*% array(compo)
return(array(compo)*exp(x) + x / 100)
}
UA <- function(x){
At <- matrix(0, length(data) - order, order1)
for(j in 1:order1){
At[, j] <- timespI %*% x[(j-1)*J+1:J]*M[j+1]#exp(x[(j-1)*J+1:J]) /  sum(exp(x))
}
comp2 = At * X
if(order1==0){comp2 = rep(0, length(mut))}
if(order1>1){comp2 = array(rowSums(At * X))}
vart <- array(mut) + array(comp2)
if(order2>0){
temp <- sigma2lat
vart <- rep(0, length(data)-order)
for(i in 1:(length(data)-order)){
vart[i] <- mut[i] + sum(At[i, ]*X[i, ])+ sum(Bt[i, ]*temp[(order+i-1):i])
temp    <- c(temp, vart[i])
}
}
compo   <- - Y*log(vart) + vart
return(sum(compo) + sum(x^2) / (2*100))
}
grad_UA <- function(x, deltaBb=deltaB, Mm=M, tempsig=sigma2lat){
At <- matrix(0, length(data) - order, order1)
for(j in 1:order1){
At[, j] <- timespI %*% x[(j-1)*J+1:J]*Mm[j+1]#exp(x[(j-1)*J+1:J]) /  sum(exp(x))
}
Bt <- matrix(0, length(data) - order, order2)
for(j in 1:order2){
Bt[, j] <- timespI %*% deltaBb[(j-1)*J+1:J]*Mm[order1+j+1]#exp(x[(j-1)*J+1:J]) /  sum(exp(x))
}
comp2 = At * X
if(order1==0){comp2 = rep(0, length(mut))}
if(order1>1){comp2 = array(rowSums(At * X))}
vart <- array(mut) + array(comp2)
if(order2>0){
temp <- tempsig #sigma2lat
vart <- rep(0, length(data)-order)
for(i in 1:(length(data)-order)){
vart[i] <- mut[i] + sum(At[i, ]*X[i, ])+ sum(Bt[i, ]*temp[(order+i-1):i])
temp    <- c(temp, vart[i])
}
}
if(order1==1){compo   <- array(t(timespI) %*% array((- Y/vart + 1)*array(X)))*M[order+1]}
if(order1 > 1){
compo <- NULL
for(j in 1:order1){
compo   <- c(compo, array(t(timespI) %*% array((- Y/vart + 1)*X[, j]))*M[j+1])
}
}
#expxdev <- diag(exp(x)/sum(exp(x))) - tcrossprod(exp(x), exp(x)) /  (sum(exp(x)))^2
#return(array(expxdev %*% compo) + (x) / (100))
return(array(compo))
}
UB <- function(x){
Bt <- matrix(0, length(data) - order, order2)
for(j in 1:order2){
Bt[, j] <- timespI %*% x[(j-1)*J+1:J]*M[order1+j+1]#exp(x[(j-1)*J+1:J]) /  sum(exp(x))
}
comp2 = At * X
if(order1==0){comp2 = rep(0, length(mut))}
if(order1>1){comp2 = array(rowSums(At * X))}
vart <- array(mut) + array(comp2)
if(order2>0){
temp <- sigma2lat
vart <- rep(0, length(data)-order)
for(i in 1:(length(data)-order)){
vart[i] <- mut[i] + sum(At[i, ]*X[i, ])+ sum(Bt[i, ]*temp[(order+i-1):i])
temp    <- c(temp, vart[i])
}
}
compo   <- - Y*log(vart) + vart
return(sum(compo))# + sum(x^2) / (2*100))
}
grad_UB <- function(x, deltaAa, Mm, tempsig){
At <- matrix(0, length(data) - order, order1)
for(j in 1:order1){
At[, j] <- timespI %*% deltaAa[(j-1)*J+1:J]*Mm[j+1] #/  sum(exp(x))
}
Bt <- matrix(0, length(data) - order, order2)
for(j in 1:order2){
Bt[, j] <- timespI %*% x[(j-1)*J+1:J]*Mm[order1+j+1]#exp(x[(j-1)*J+1:J]) /  sum(exp(x))
}
comp2 = At * X
if(order1==0){comp2 = rep(0, length(mut))}
if(order1>1){comp2 = array(rowSums(At * X))}
vart <- array(mut) + array(comp2)
sigma2m <- Bt
if(order2>0){
temp <- tempsig
vart <- rep(0, length(data)-order)
for(i in 1:(length(data)-order)){
vart[i] <- mut[i] + sum(At[i, ]*X[i, ])+ sum(Bt[i, ]*temp[(order2+i-1):i])
sigma2m[i, ] <- temp[(order2+i-1):i]
temp    <- c(temp, vart[i])
}
}
if(order2==1){compo   <- array(t(timespI) %*% array((- Y/vart + 1)*sigma2m))*M[order1+order2+1]}
if(order2 > 1){
compo <- NULL
for(j in 1:order2){
compo   <- c(compo, array(t(timespI) %*% array((- Y/vart + 1)*sigma2m[, j]))*M[order1+j+1])
}
}
#expxdev <- diag(exp(x)/sum(exp(x))) - tcrossprod(exp(x), exp(x)) /  (sum(exp(x)))^2
#return(array(expxdev %*% compo) + (x) / (100))
return(array(compo))
}
US <- function(x, deltaAa, deltaBb, Mm){
At <- matrix(0, length(data) - order, order1)
for(j in 1:order1){
At[, j] <- timespI %*% deltaAa[(j-1)*J+1:J]*Mm[j+1] #/  sum(exp(x))
}
Bt <- matrix(0, length(data) - order, order2)
for(j in 1:order2){
Bt[, j] <- timespI %*% deltaBb[(j-1)*J+1:J]*Mm[order1+j+1]#exp(x[(j-1)*J+1:J]) /  sum(exp(x))
}
vartcan <- length(Y)
temp <- x
if(order2>0){
vart <- rep(0, length(data)-order)
for(i in 1:(length(data)-order)){
vartcan[i] <- mut[i] + sum(At[i, ]*X[i, ])+ sum(Bt[i, ]*temp[(order+i-1):i])
temp    <- c(temp, vart[i])
#sigma2m[i, ] <- temp[(order2+i-1):i]
}
}
compo   <- sum(- Y*log(vartcan) + vartcan) + sum(x - (data[1:order])*log(x))
return(sum(compo) - sum(dgamma(x, 0.1, 0.1, log = T)))# + sum(x^2) / (2*100))
}
grad_US <- function(x, deltaAa, deltaBb, Mm){
ret <- jacobian(US, x, deltaAa = deltaAa, deltaBb = deltaBb, Mm=Mm)
return(array(ret))
}
UM <- function(x){
At <- matrix(0, length(data) - order, order1)
for(j in 1:order1){
At[, j] <- timespI %*% deltaA[(j-1)*J+1:J]*exp(x[j+1]) /  sum(exp(x))
}
comp2 = At * X
if(order1==0){comp2 = rep(0, length(mut))}
if(order1>1){comp2 = array(rowSums(At * X))}
vart <- array(mut) + array(comp2)
if(order2>0){
temp <- sigma2lat
Bt <- matrix(0, length(data) - order, order2)
for(j in 1:order2){
Bt[, j] <- timespI %*% deltaB[(j-1)*J+1:J]*exp(x[order1+j+1]) /  sum(exp(x))
}
vart <- rep(0, length(data)-order)
for(i in 1:(length(data)-order)){
vart[i] <- mut[i] + sum(At[i, ]*X[i, ])+ sum(Bt[i, ]*temp[(order+i-1):i])
temp    <- c(temp, vart[i])
}
}
compo   <- - Y*log(vart) + vart
return(sum(compo) + sum(x^2) / (2*100))
}
grad_UM <- function(x, deltaAa, deltaBb, tempsig){
At <- matrix(0, length(data) - order, order1)
Atder <- matrix(0, length(data) - order, order1)
for(j in 1:order1){
At[, j] <- timespI %*% deltaAa[(j-1)*J+1:J]*exp(x[j+1]) /  sum(exp(x))#exp(x[(j-1)*J+1:J]) /  sum(exp(x))
Atder[, j] <- timespI %*% deltaAa[(j-1)*J+1:J]
}
comp2 = array(At * X)
if(order==0){comp2 = rep(0, length(mut))}
if(order>1){comp2 = rowSums(At * X)}
vart <- array(mut) + array(comp2)
if(order2>0){
sigma2m <- Bt
temp <- tempsig#sigma2lat
Bt <- matrix(0, length(data) - order, order2)
Btder <- matrix(0, length(data) - order, order2)
for(j in 1:order2){
Bt[, j] <- timespI %*% deltaBb[(j-1)*J+1:J]*exp(x[order1+j+1]) /  sum(exp(x))#exp(x[(j-1)*J+1:J]) /  sum(exp(x))
Btder[, j] <- timespI %*% deltaBb[(j-1)*J+1:J]
}
vart <- rep(0, length(data)-order)
for(i in 1:(length(data)-order)){
vart[i] <- mut[i] + sum(At[i, ]*X[i, ])+ sum(Bt[i, ]*temp[(order+i-1):i])
temp    <- c(temp, vart[i])
sigma2m[i, ] <- temp[(order+i-1):i]
}
}
part1 <- - Y/vart + 1
comp2der <- array(crossprod(part1, At*X))
if(order2>0){comp2der <- array(crossprod(part1, cbind(At*X, Bt*sigma2m)))}
#comp2der <- c(0, comp2der)
expxdev <- diag(exp(x)/sum(exp(x))) - tcrossprod(exp(x), exp(x)) /  (sum(exp(x)))^2
expxdev <- matrix(expxdev[, -1], nrow = nrow(expxdev))
return(array(expxdev %*% comp2der) + (x) / (100))
}
Ucombo <- function(x){
temp    <- x[order2]
#deltaAc <- x[1:length(deltaA) + order2]
deltaBc <- x[1:length(deltaB) + order2]
deltaMc <- x[1:length(deltaM) + order2 + length(deltaB)]
At <- matrix(0, length(data) - order, order1)
for(j in 1:order1){
At[, j] <- timespI %*% deltaA[(j-1)*J+1:J]*exp(deltaMc[j+1]) /  sum(exp(deltaMc))
}
comp2 = At * X
if(order1==0){comp2 = rep(0, length(mut))}
if(order1>1){comp2 = array(rowSums(At * X))}
vart <- array(mut) + array(comp2)
if(order2>0){
#temp <- sigma2lat
Bt <- matrix(0, length(data) - order, order2)
for(j in 1:order2){
Bt[, j] <- timespI %*% deltaBc[(j-1)*J+1:J]*exp(deltaMc[order1+j+1]) /  sum(exp(deltaMc))
}
vart <- rep(0, length(data)-order)
for(i in 1:(length(data)-order)){
vart[i] <- mut[i] + sum(At[i, ]*X[i, ])+ sum(Bt[i, ]*temp[(order+i-1):i])
temp    <- c(temp, vart[i])
}
}
compo   <- - Y*log(vart) + vart
return(sum(compo) + sum(deltaMc^2) / (2*100))
}
grad_Ucombo <- function(x){
temp    <- x[order2]
#deltaAc <- x[1:length(deltaA) + order2]
deltaBc <- x[1:length(deltaB) + order2]
deltaMc <- x[1:length(deltaM) + order2 + length(deltaB)]
Mc <- exp(deltaMc)/sum(exp(deltaMc))
ret1 <- grad_US(temp, deltaA, deltaBc, Mc)
#ret2 <- grad_UA(deltaA, deltaBc, Mc, temp)
ret3 <- grad_UB(deltaBc, deltaA, Mc, temp)
ret4 <- grad_UM(Mc, deltaA, deltaBc, temp)
ret <- c(ret1, ret3, ret4)
return(array(ret))
}
HMC_combo = function (U, grad_U, epsilon, L = 30, current_q, arc)
{
q = current_q
p = rnorm(length(q),0,1)  # independent standard normal variates
current_p = p
# Make a half step for momentum at the beginning
p = p - epsilon * grad_U(q) / 2
# Alternate full steps for position and momentum
for (j in 1:L)
{
# Make a full step for the position
q = q + epsilon * p
q0 <- q[order2]
#q1 <- q[1:length(deltaA) + order2]
q2 <- q[1:length(deltaB) + order2]
q3 <- q[1:length(deltaM) + order2 + length(deltaB)]
q0 = q0 * (q0 > 0)
#q1 = q1 * (q1 >= 0)
#q1 = (q1 > 1) + q1 * (q1 <= 1)
q2 = q2 * (q2 >= 0)
q2 = (q2 > 1) + q2 * (q2 <= 1)
# Make a full step for the momentum, except at end of trajectory
q <- c(q0, q2, q3)
if (j!=L) p = p - epsilon * grad_U(q)
}
# Make a half step for momentum at the end.
p = p - epsilon * grad_U(q) / 2
# Negate momentum at end of trajectory to make the proposal symmetric
p = -p
# Evaluate potential and kinetic energies at start and end of trajectory
current_U = U(current_q)
current_K = sum(current_p^2) / 2
proposed_U = U(q)
proposed_K = sum(p^2) / 2
# Accept or reject the state at end of trajectory, returning either
# the position at the end of the trajectory or the initial position
R <- current_U-proposed_U+current_K-proposed_K
if(is.nan(R)){R = -Inf}
if(is.na(R)){R = -Inf}
if (log(runif(1)) < R)
{
up = q  # accept
arc <- arc + 1
}
else
{
up = current_q
}
return(list(up = up, arc = arc))  # reject
}
Y <- data
if(order>0){Y <- data[-(1:order)]}
X <- NULL
if(order1 > 0){
for(j in 1:order1){
ind <- (order-j+1):(length(data) - j)
X <- cbind(X, array(data[ind]))
}
}
At <- 0
deltamu <- rnorm(ncol(timespI))
deltaA  <- runif(ncol(timespI)*order1)
deltaB  <- runif(ncol(timespI)*order2)
if((order1+order2)>0){
deltaM  <- rnorm(order1+order2+1)
M       <- exp(deltaM) / sum(exp(deltaM))
}
mut     <- timespI %*% exp(deltamu)
if(order1>0){
At <- matrix(0, length(data) - order, order1)
for(j in 1:order1){
At[, j] <- timespI %*% deltaA[(j-1)*J+1:J]*M[j+1]# exp(deltaA[(j-1)*J+1:J]) /  sum(exp(deltaA))
}
}
if(order2>0){
Bt <- matrix(0, length(data) - order, order2)
for(j in 1:order2){
Bt[, j] <- timespI %*% deltaB[(j-1)*J+1:J]*M[order1+j+1]# exp(deltaA[(j-1)*J+1:J]) /  sum(exp(deltaA))
}
}
sigma2lat <- NULL
if(order2>0)
{
sigma2lat <- (deltaA[1]*M[2])/(1-(deltaB[1]*M[3]))
}
delta <- c(sigma2lat, deltaB, deltaM)
temp <- sigma2lat
if(order2>0){
vart <- rep(0, length(data)-order)
for(i in 1:(length(data)-order)){
vart[i] <- mut[i] + sum(At[i, ]*X[i, ])+ sum(Bt[i, ]*temp[(order+i-1):i])
temp    <- c(temp, vart[i])
}
}
itr <- 0
arA <- 0
arB <- 0
arM <- 0
armu <- 0
arS  <- 0
arcom <- 0
sdA <- 1e-6
sdB <- 1e-10
sdM <- 1e-6
sdmu <- 1e-4
sdS  <- 1e-4
sdcom <- 1e-6
Als <- list()
Bls <- list()
Mls <- list()
Mlsder <- list()
Alsder <- list()
Blsder <- list()
pb <- txtProgressBar(min = itr, max = Total_itr, style = 3)
Pred <- rep(0, Total_itr)
while(itr < Total_itr){
itr <- itr + 1
temp    <- HMC(Umu, grad_Umu, sdmu, L = 30, deltamu, armu)
deltamu <- temp$up
armu     <- temp$arc
mut <- timespI %*% exp(deltamu)
if(order>0){
if(order1>0){
temp   <- HMCA(UA, grad_UA, sdA, L = 30, deltaA, arA)
#print(sum(temp$up-deltaA)^2)
deltaA <- temp$up
arA    <- temp$arc
At <- matrix(0, length(data) - order, order1)
for(j in 1:order1){
At[, j] <- timespI %*% deltaA[(j-1)*J+1:J]*M[j+1]# exp(deltaA[(j-1)*J+1:J]) /  sum(exp(deltaA))
}
}
if(order2==0){
temp   <- HMC(UM, grad_UM, sdM, L = 30, deltaM, arM)
#print(sum(temp$up-deltaM)^2)
deltaM <- temp$up
arM    <- temp$arc
M       <- exp(deltaM) / sum(exp(deltaM))
}
if(order2>0){
temp   <- HMC_combo(Ucombo, grad_Ucombo, sdcom, L = 30, delta, arcom)
#print(sum(temp$up-deltaA)^2)
delta <- temp$up
arcom <- temp$arc
sigma2lat <- delta[order2]
#deltaA <- delta[1:length(deltaA) + order2]
deltaB <- delta[1:length(deltaB) + order2]
deltaM <- delta[1:length(deltaM) + order2 + length(deltaB)]
M       <- exp(deltaM) / sum(exp(deltaM))
# At <- matrix(0, length(data) - order, order1)
# for(j in 1:order1){
#   At[, j] <- timespI %*% deltaA[(j-1)*J+1:J]*M[j+1]# exp(deltaA[(j-1)*J+1:J]) /  sum(exp(deltaA))
# }
Bt <- matrix(0, length(data) - order, order2)
for(j in 1:order2){
Bt[, j] <- timespI %*% deltaB[(j-1)*J+1:J]*M[order1+j+1]# exp(deltaA[(j-1)*J+1:J]) /  sum(exp(deltaA))
}
comp2 = At * X
if(order1==0){comp2 = rep(0, length(mut))}
if(order1>1){comp2 = array(rowSums(At * X))}
vart <- array(mut) + array(comp2)
if(order2>0){
temp <- sigma2lat
vart <- rep(0, length(data)-order)
for(i in 1:(length(data)-order)){
vart[i] <- mut[i] + sum(At[i, ]*X[i, ])+ sum(Bt[i, ]*temp[(order+i-1):i])
temp    <- c(temp, vart[i])
}
}
}
}
Pred[itr] <- mean((Y-vart)^2)
if(itr %% 100 == 0){
if(order > 0){
if(order2==0){
ar <- arM/ itr
cat(ar, "acceptance rate for M")
if(ar<.60){sdM <- sdM * (.1)}
if(ar>.90){sdM <- sdM * (10)}
}
ar <- arA/ itr
cat(ar, "acceptance rate for A")
if(ar<.60){sdA <- sdA * (.1)}
if(ar>.90){sdA <- sdA * (10)}
if(order2>0){
ar <- arcom/ itr
cat(ar, "acceptance rate for combo")
if(ar<.60){sdcom <- sdcom * (.1)}
if(ar>.90){sdcom <- sdcom * (10)}
# ar <- arS/ itr
# cat(ar, "acceptance rate for Latentsig")
# if(ar<.60){sdS <- sdS * (.1)}
# if(ar>.90){sdS <- sdS * (10)}
}
}
ar <- armu/ itr
cat(ar, "acceptance rate for mu")
if(ar<.60){sdmu <- sdmu * (.1)}
if(ar>.90){sdmu <- sdmu * (10)}
}
mutder <- timespIder %*% exp(deltamu)
if(order1>0){
Atder <- matrix(0, length(data) - order, order1)
for(j in 1:order1){
Atder[, j] <- timespIder %*% deltaA[(j-1)*J+1:J]*M[j+1]# exp(deltaA[(j-1)*J+1:J]) /  sum(exp(deltaA))
}
Als[[itr]] <- At
Alsder[[itr]] <- Atder
}
if(order2>0){
Btder <- matrix(0, length(data) - order, order2)
for(j in 1:order2){
Btder[, j] <- timespIder %*% deltaB[(j-1)*J+1:J]*M[order1+j+1]# exp(deltaA[(j-1)*J+1:J]) /  sum(exp(deltaA))
}
Bls[[itr]] <- Bt
Blsder[[itr]] <- Btder
}
Mls[[itr]] <- mut
Mlsder[[itr]] <- mutder
Sys.sleep(0.1)
# update progress bar
setTxtProgressBar(pb, itr)
# plot(Atder)
#plot(Bt[, order2])
#points(At[, 1], col = 2)
#points(At[, 2], col=3)
#print(sigma2lat)
}
close(pb)
if(order1>0){out <- list(pred = Pred[(burn+1):Total_itr], Afn = Als[(burn+1):Total_itr], Mfn = Mls[(burn+1):Total_itr], Afnder = Alsder[(burn+1):Total_itr], Mfnder = Mlsder[(burn+1):Total_itr])}
if(order2>0){out <- list(pred = Pred[(burn+1):Total_itr], Afn = Als[(burn+1):Total_itr], Bfn = Bls[(burn+1):Total_itr], Mfn = Mls[(burn+1):Total_itr], Afnder = Alsder[(burn+1):Total_itr], Bfnder = Blsder[(burn+1):Total_itr], Mfnder = Mlsder[(burn+1):Total_itr])}
if(order==0){out <- list(Mfn = Mls[(burn+1):Total_itr], Mfnder = Mlsder[(burn+1):Total_itr])}
return(out)
}
fitS <- fit.tvINGARCHMCMCcombo(as.numeric(c(x0,x)), order1 = 1, order2 = 1, norder = 4, knot = 6)#, sigma2in = sigma2[1], sigup = T)
library(IMIFA)
